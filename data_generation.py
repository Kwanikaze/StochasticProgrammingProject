# -*- coding: utf-8 -*-
"""MIE1612 Data Generation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13flAqS8Qi6tIFVAzsYVx0GTb-3M8LgUJ
"""

import numpy as np
import random as r

import math
import matplotlib.pyplot as plt
from argparse import ArgumentParser
class data():

    def __init__(self, n_scenarios, seed):
        self.num_scenarios = n_scenarios
        self.seed = seed

        #[num_scenarios, seed] = get_params()
        self.random = r
        self.random.seed(self.seed)
        self.num_locations = 80  # 121 casualities/week with lethality multiplier = 1 or 500/month,
        #num_scenarios = n_scenarios  # 9  # Factors A,B,C,D

        # # air ambulances
        self.aa = 60
        # # of ground ambulances
        self.ga = 240
        # avg # of aa trips/dlethality_scenay
        self.aatrips = 5
        # # of ga trips/day
        self.gatrips = 10
        # Four brigades
        self.brigade_centers = {'B1': (100, 100), 'B2': (100, 400), 'B3': (400, 400), 'B4': (400, 100)}  # todo randomize this?

        # Factors A,B,C,D
        # Factor A, lethality_multiplier
        # Factor B,  parameter h, operating radius (NM) of a brigade in four casualty clusters
        # Factor C, % of ground ambulance use  required for each evacuation site based on optimal mix factors.
        # Factor D, days of operation

        # TODO update to sample from distribution for these
        # T = scenarios for evaluation with index t ∈ T. 9 scenarios: lethality, casualty radius, percentage of ground ambulances required,days
        self.Tset = ['T' + str(s) for s in list(range(0, self.num_scenarios))]
        self.lethality_scen = {}
        self.casualty_radius_scen = {}
        self.wx_scen = {}
        self.days_scen = {}
        for t in self.Tset:
            self.lethality_scen[t] = self.random.uniform(0, 2)
            self.casualty_radius_scen[t] = self.random.uniform(50, 150)
            self.wx_scen[t] = self.random.uniform(0.2, 0.6)
            self.days_scen[t] = self.random.randint(1, 3) * 7
        # lethality_scen = {'T0': 1, 'T1': 1.5, 'T2': 2, 'T3': 1, 'T4': 1.5, 'T5': 2, 'T6': 1, 'T7': 1.5, 'T8': 2}
        # casualty_radius_scen = {'T0': 50, 'T1': 50, 'T2': 50, 'T3': 100, 'T4': 100, 'T5': 100, 'T6': 150, 'T7': 150, 'T8': 150}
        # wx_scen = {'T0': 0.2, 'T1': 0.4, 'T2': 0.3, 'T3': 0.3, 'T4': 0.2, 'T5': 0.4, 'T6': 0.4, 'T7': 0.3, 'T8': 0.2}
        # days_scen = {'T0': 7, 'T1': 14, 'T2': 21, 'T3': 14, 'T4': 21, 'T5': 7, 'T6': 21, 'T7': 7, 'T8': 14}
        # I	= For each of the 9 scenarios,set of 80 locations where injuries may occur with index i ∈ I
        self.Iset = self.gen_Iset()
        # J	=  set of candidate helicopter evacuation sites with index j ∈ J.
        self.Jset = {'J0': (140, 380), 'J1': (279, 395), 'J2': (209, 389), 'J3': (306, 18), 'J4': (124, 289),
                'J5': (258, 39), 'J6': (142, 147), 'J7': (318, 204), 'J8': (359, 203), 'J9': (137, 171),
                'J10': (223, 49), 'J11': (94, 342), 'J12': (44, 146), 'J13': (208, 241), 'J14': (354, 113),
                'J15': (188, 122), 'J16': (39, 273), 'J17': (292, 12), 'J18': (216, 109), 'J19': (394, 196)}
        # K = set of candidate hospital sites with index k ∈ K.
        self.Kset = {'K0': (140, 380), 'K1': (279, 395), 'K2': (209, 389), 'K3': (306, 18), 'K4': (124, 289),
                'K5': (258, 39), 'K6': (142, 147), 'K7': (318, 204), 'K8': (359, 203), 'K9': (137, 171)}
        # L =  type of bed requirement for a patient (minimal, intermediate, and intensive care) with l ∈ L.
        self.Lset = ['MCW', 'ICW', 'ICU']
        # M = type of evacuation assets, ground or air with m ∈ M
        self.Mset = ['G', 'A']
        # Avoid a huge dictionary 600x600 = 36,000 entries
        # p_t =  probability that scenario t occurs (non-negative and summing to 1).
        self.p_t = self.gen_probs()
        # b_ijt =  distance between injury location i and helicopter evacuation site j for scenario t.
        self.b_ijt = self.gen_distances(self.Jset)
        # c_ikt =  distance between injury location i and hospital location k for scenario t.
        self.c_ikt = self.gen_distances(self.Kset)
        # d_ijmt =  speed of transport from j to k by vehicle type m for scenario t, assigned stochastically.
        self.d_jkmt = self.gen_d_jkmt()
        # e_it =  number of total patients injured at location i for scenario t, assigned stochastically.
        self.e_it = self.gen_e_it()
        # a_it =  injury severity weight of most critically injured patient departing from site i for scenario t, assigned stochastically.
        # need e_it first
        self.a_it = self.gen_a_it()
        # f_lt =  the number of patients with type l bed requirements. # Table 3 injury severity
        self.f_lt = self.gen_f_lt()
        # ecap_mt =  capacity during simulation time period for patient evacuation by m-type evacuation assets.
        self.ecap_mt = self.gen_ecap_mt()
        # hcap_lt =  capacity during simulation time period for hospital acceptance of l-type patients.
        self.hcap_lt = self.gen_hcap_lt()
        # enod_jt = evacuation node capacity for each node j. 1M
        self.enod = 1e6
        # hnod_kt = hospital node capacity for each node k. 1M
        self.hnod = 1e6
        # u = 5  maximum number of hospitalization sites to be occupied.
        self.u = 5
        # v = 10  maximum number of evacuation sites to be occupied.
        self.v = 10

        # dicts = [self.p_t, self.b_ijt, self.c_ikt, self.d_jkmt, self.e_it, self.a_it, self.f_lt, self.ecap_mt, self.hcap_lt, self.wx_scen]
        # file_name = "data.txt"
        # open(file_name, 'w').close()
        # text_file = open(file_name, "a")
        # for d in range(len(dicts)):
        #     text_file.write(self.format_string_data(dicts[d]))
        #     text_file.write("\n")
        #
        # text_file.close()

    """## The Optimization Model
    
    ### Sets
    """


    def gen_location(self,casualty_radius):
        brigade_centre = (0, 0)
        # Generate a random number b
        b = self.random.uniform(0, 1)
        # Table 1, 4 casualty location centre clusters (n,o): {100,100}, {400,100}, {100,400}, {400,400},
        # B1:0.2, B2: 0.35, B3:0.2, B4:0.25}
        if b < (0.2):
            brigade_centre = self.brigade_centers['B1']
        elif b < (0.55):
            brigade_centre = self.brigade_centers['B2']
        elif b < (0.75):
            brigade_centre = self.brigade_centers['B3']
        else:
            brigade_centre = self.brigade_centers['B4']
        # Casualty location (n', o')
        # n' = n + qcos(p), o' = o + qsin(p)
        casualty_x = brigade_centre[0] + self.random.uniform(-1 * casualty_radius, casualty_radius) * math.cos(
            self.random.uniform(0, 6.28))
        casualty_y = brigade_centre[1] + self.random.uniform(-1 * casualty_radius, casualty_radius) * math.sin(
            self.random.uniform(0, 6.28))
        return (casualty_x, casualty_y)


    def gen_Iset(self):
        # For each of the 9 scenarios, generate 80 locations using casualty brigade_casualities breakdown, as well as factor h the distance --> 80*9=720 locations
        Iset = {}
        scen_count = 0
        for i in range(0, self.num_scenarios * self.num_locations):
            if (i % self.num_locations == 0) and i >= 1:
                scen_count += 1
            loc_index = i - scen_count * self.num_locations
            # Note some coordinates can be negative for radius =150
            Iset[('I' + str(loc_index), 'T' + str(scen_count))] = self.gen_location(
                self.casualty_radius_scen['T' + str(scen_count)])
        return Iset
        plot_map()


    # To Do, different marker for each run with legend, add labels for potential evac sites
    # https://stackoverflow.com/questions/4270301/matplotlib-multiple-datasets-on-the-same-scatter-plot/47728146
    # https://stackoverflow.com/questions/28706115/how-to-use-different-marker-for-different-point-in-scatter-plot-pylab
    # https://stackoverflow.com/questions/5147112/how-to-put-individual-tags-for-a-scatter-plot
    def plot_map(self):
        fig = plt.figure(figsize=(15, 15))
        ax1 = fig.add_subplot(111)
        markers = [".", "1", "2", "s", "+", "^", "D", 'x', "p"]
        # Plot casualties
        for t in self.Tset:
            x = []
            y = []
            # for point in Iset.values():
            for i_loc, scenario in self.Iset.keys():
                if scenario == t:
                    x.append(self.Iset[(i_loc, scenario)][0])
                    y.append(self.Iset[(i_loc, scenario)][1])
            ax1.scatter(x, y, marker=markers[int(t.replace("T", ""))], label=str(t))
        # Plot evac and hospital sites
        site_x = []
        site_y = []
        site_labels = []
        for i in range(0, len(self.Jset)):
            if i < len(self.Kset):
                site_labels.append('H' + str(i) + '/E' + str(i))
            else:
                site_labels.append('E' + str(i))
        for site in self.Jset.values():
            site_x.append(site[0])
            site_y.append(site[1])
        ax1.scatter(site_x, site_y, marker="*")
        # Labels for evac and hospital sites
        for site_label, x, y in zip(site_labels, site_x, site_y):
            if site_label != 'E17':
                plt.annotate(site_label, xy=(x, y), xytext=(30, 15), textcoords='offset points', ha='right',
                             va='bottom',
                             bbox=dict(boxstyle='round,pad=0.5', fc='yellow', alpha=0.5),
                             arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=0'))
            else:
                plt.annotate(site_label, xy=(x, y), xytext=(-10, 10), textcoords='offset points', ha='right',
                             va='bottom',
                             bbox=dict(boxstyle='round,pad=0.5', fc='yellow', alpha=0.5),
                             arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=0'))
        plt.title('Graphical Representation of Optimization Model')
        plt.ylim(-50, 550)
        plt.xlim(-50, 550)
        plt.legend(loc="upper left", title="Casualties")
        plt.show()


    """### Problem Data"""


    def gen_probs(self):
        probs = {}
        for t in self.Tset:
            probs[t] = 1 / self.num_scenarios
        return probs


    def gen_distances(self, site_set):
        distances = {}
        for (i_loc, scenario) in self.Iset.keys():
            for site in site_set.keys():
                distances[(i_loc, site, scenario)] = math.sqrt(
                    math.pow(self.Iset[(i_loc, scenario)][0] - site_set[site][0], 2) +
                    math.pow(self.Iset[(i_loc, scenario)][1] - site_set[site][1], 2))
        return distances


    def gen_d_jkmt(self):
        speeds = {}
        for j in self.Jset:
            for k in self.Kset:
                for m in self.Mset:
                    for t in self.Tset:
                        if m == 'G':
                            speeds[(j, k, m, t)] = np.random.uniform(30, 60)
                        elif m == 'A':
                            speeds[(j, k, m, t)] = np.random.uniform(75, 115)
        return speeds


    def gen_e_it(self):
        num_injuries = {}
        for (i_loc, scenario) in self.Iset.keys():
            lethality = self.lethality_scen[scenario]
            rand = self.random.uniform(0, 1)
            # Table 2 - Casualities in same location, derived from Operation Iraqi Freedom Medical Evacuation Log
            if rand < 0.574:
                num_injuries[(i_loc, scenario)] = round(1 * lethality)
            elif rand < (0.914):
                num_injuries[(i_loc, scenario)] = round(2 * lethality)
            elif rand < (0.964):
                num_injuries[(i_loc, scenario)] = round(3 * lethality)
            else:
                num_injuries[(i_loc, scenario)] = round(4 * lethality)
        return num_injuries


    def gen_a_it(self):
        # Table 4, injury severity score (ISS), P(Fatal), P(Non-fatal)=1 - P(Fatal), Penalty Weight
        # injury_severity_fatal_dict = {'1-8':0.01, '9-15':0.02, '16-24':0.05, '>24':0.29}
        # injury_severity_penalty_weight_dict = {'1,8':1.01, '9-15':1.02, '16-24':1.05, '>24':1.41}

        # inverse CDF sampling of g? What's g? Table 3 and Table4
        severity = {}
        for (i_loc, scenario) in self.Iset.keys():
            # print(e_it[(i_loc,scenario)])
            # print(1-(math.pow(0.11,e_it[(i_loc,scenario)])))
            rand = self.random.uniform(0, 1)
            if rand > (1 - math.pow(0.11, self.e_it[(i_loc, scenario)])):
                severity[(i_loc, scenario)] = 1.41
            elif rand > (1 - math.pow(0.24, self.e_it[(i_loc, scenario)])):
                severity[(i_loc, scenario)] = 1.05
            elif rand > (1 - math.pow(0.55, self.e_it[(i_loc, scenario)])):
                severity[(i_loc, scenario)] = 1.02
            else:
                severity[(i_loc, scenario)] = 1.01
        return severity


    def gen_f_lt(self):
        patients = {}
        # Table 3, injury severity score percentages
        # injury_severity_dict = {'1-8':0.45, '9-15':0.32, '16-24':0.12, '>24':0.11}
        scenario_casualties = {}
        for (i_loc, scenario) in self.Iset.keys():
            if scenario in scenario_casualties.keys():
                scenario_casualties[scenario] += self.e_it[(i_loc, scenario)]
            else:
                scenario_casualties[scenario] = self.e_it[(i_loc, scenario)]
        for t in self.Tset:
            for l in self.Lset:
                if l == 'MCW':
                    patients[(l, t)] = round(.4 * scenario_casualties[t])
                elif l == 'ICW':
                    patients[(l, t)] = round(.35 * scenario_casualties[t])
                else:
                    patients[(l, t)] = scenario_casualties[t] - round(.4 * scenario_casualties[t]) - round(
                        .35 * scenario_casualties[t])
        return patients


    def gen_ecap_mt(self):
        movements = {}
        for m in self.Mset:
            for t in self.Tset:
                if m == 'G':
                    movements[m, t] = self.ga * self.days_scen[t] * self.gatrips
                if m == 'A':
                    movements[m, t] = self.aa * self.days_scen[t] * self.aatrips
        return movements


    def gen_hcap_lt(self):
        # 'MCW':250,'ICW':250,'ICU':60}
        bed_limits = {}
        for t in self.Tset:
            for l in self.Lset:
                if l == 'ICU':
                    bed_limits[l, t] = 60 * self.days_scen[t]
                else:
                    bed_limits[l, t] = 250 * self.days_scen[t]
        return bed_limits

    '''
    Export data to txt file to read in java
    '''


    def format_string_data(self,dict):
        string = ""
        for key, value in dict.items():
            if isinstance(key, str):
                string += str(key) + " "
            else:  # tuple so we go through each element
                for k in key:
                    string += str(k) + " "
            string += str(value) + "\n"

        return string



